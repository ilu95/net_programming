# TCP 프로그램 실행 과정
# 서버 프로그램을 실행합니다. s.bind(('', 9999))는 서버 소켓을 생성하고 bind() 함수를 호출하여 서버 소켓과 IP 주소와 포트를 바인딩합니다. s.listen(5)는 서버 소켓을 listen 모드로 변경하고, 최대 5개의 클라이언트를 동시에 처리할 수 있도록 합니다.
# 클라이언트 프로그램을 실행합니다. 클라이언트 소켓을 생성하고 서버의 IP 주소와 포트 번호를 지정하여 서버에 연결합니다. sock.connect(('localhost', 9999))는 서버에 연결합니다.
# sock.recv(1024) 함수를 호출하여 서버에서 보낸 데이터를 수신합니다.
# decode() 함수를 호출하여 수신한 데이터를 문자열로 디코딩하여 출력합니다.
# 클라이언트 소켓을 닫습니다. sock.close() 함수를 호출하여 소켓을 닫습니다.

# UDP 프로그램 실행 과정
# 서버 프로그램을 실행합니다. s.bind(('', 9999))는 서버 소켓을 생성하고 bind() 함수를 호출하여 서버 소켓과 IP 주소와 포트를 바인딩합니다.
# 클라이언트 프로그램을 실행합니다. 클라이언트 소켓을 생성합니다.
# sock.sendto() 함수를 호출하여 데이터를 서버에 보냅니다. sendto() 함수는 TCP에서 사용되는 send() 함수와는 달리 연결이 필요 없으며, 수신자의 IP 주소와 포트 번호를 지정하여 데이터를 보낼 수 있습니다.
# sock.recvfrom(1024) 함수를 호출하여 서버에서 보낸 데이터를 수신합니다. recvfrom() 함수는 수신자의 IP 주소와 포트 번호를 함께 반환합니다.
# decode() 함수를 호출하여 수신한 데이터를 문자열로 디코딩하여 출력합니다.
# 클라이언트 소켓을 닫습니다. sock.close() 함수를 호출하여 소켓을 닫습니다.

# TCP는 연결 지향적인 프로토콜이기 때문에 연결 설정 및 종료 과정이 추가되지만, UDP는 비연결 지향적인 프로토콜이기 때문에 연결 설정 및 종료 과정이 필요 없습니다.

import socket

# 소켓 생성
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# 서버로 데이터 전송
sock.sendto(b'Request', ('localhost', 9999))

# 서버에서 전송된 데이터 수신
data, addr = sock.recvfrom(1024)
print("Time: ", data.decode())

# 소켓 닫기
sock.close()
